#!/bin/bash
#BACKTITLE="Demo Script"
#WINTITLE="Box title"
SHADOW=0
[ $SILENT -eq 0 ] && SILENT=1

red='\Z1'
green='\Z2'
blue='\Z4'
blink=''
NC='\Zn'

# Trap handler
function dabort() {
  rm -f readval.*
  abort
  exit 1
}

# Make sure Ctrl-C forces exit
# (for dialog, Ctrl-C seems to be the same as "No", not "ESC")
trap 'dabort' INT TERM

# Obtain the current window size
function winsize {
  win_x=`stty size|awk '{print $2}'`
  win_y=`stty size|awk '{print $1}'`
}
# Set titles if needed
function titles {
  local out="dialog --cr-wrap --aspect 20 --colors"
  [ -n "$WINTITLE" ]  && out="$out --title '[ $WINTITLE ]'"
  [ -n "$BACKTITLE" ] && out="$out --backtitle '$BACKTITLE'"
  [ $SHADOW -eq 1 ]   && out="$out --shadow"
  echo $out
}
# Display "Please wait..." message
function waitmessage {
  [ $SILENT -eq 3 ] && return 0
  local out=`titles`
  out="$out --colors --infobox '$1' 0 0"
  eval $out
}
# Output a message ($1 is the message)
# rc: 0 = OK, 1 = Ctrl-C 255 = ESC
function message {
  if [ $YESTOALL -eq 1 ]; then
    waitmessage "$1"
  else
    local out=`titles`
    out="$out --msgbox '$1' 0 0"
    eval $out
  fi
}
# Same for alerts
function alert {
  if [ $YESTOALL -eq 1 ]; then
    waitmessage "$1"
  else
    local out=`titles`
    out="$out --msgbox '\Z1$1\Zn' 0 0"
    eval $out
  fi
}
# Output yesno-box
# rc: 0 = Yes, 1 = No/Ctrl-C, 255 = ESC
function yesno {
  if [ $YESTOALL -eq 1 ]; then
    waitmessage "$1"
  else
    local out=`titles`
    out="$out --yesno '$1' 0 0"
    eval $out
  fi
}
# Ask for input ($1:Text $2:DefaultVal)
# input is stored in $res ("-" on abort)
function readval {
  [ $YESTOALL -eq 1 ] && {
    res=""
    return 0
  }
  local out=`titles`
  out="$out --inputbox '$1' 0 0 '$2' 2>readval.$$"
  eval $out
  if [ $? -gt 0 ]; then
    res="-"
  else
    res=`cat readval.$$`
  fi
  rm -f readval.$$
}
# Password input
function password {
  local out=`titles`
  out="$out --insecure --passwordbox '$1' 0 0 2>readval.$$"
  eval $out
  if [ $? -gt 0 ]; then
    res="-"
  else
    res=`cat readval.$$`
  fi
  rm -f readval.$$
}
# Display a file
function textbox() {
  [ $YESTOALL -eq 1 ] && return 0
  local out=`titles`
  out="$out --textbox "$1" 0 0"
  eval $out
}
# Display output of executed program inline
# $1: Filename; $2: Timeout (optional)
function tailbox() {
  [ $SILENT -eq 3 ] && return 0
  local out=`titles`
  timeout=$2
  [ -z "$timeout" ] && timeout=$TIMEOUT
  out="$out --timeout $timeout"
  out="$out --tailbox "$1" 0 0"
  sleep 1
  eval $out
}

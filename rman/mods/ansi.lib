#!/bin/bash
# Screen output methods using plain text + ANSI sequences
#==========================================================[ Configuration ]===
SHADOW=0
[ -z "$SILENT" ] && SILENT=0

#-----------------------------------------------------------[ Trap handler ]---
trap 'echo; exit' INT TERM

#-----------------------------------------------------------------[ Colors ]---
if [ -n "${TERM}" ]; then
  red='\e[1;35;44m'
  blue='\e[0;37;44m'
  green='\e[0;32;44m'
  blink='\E[5m'
#  NC='\e[0m'              # No Color
  NC="$blue"
fi

#================================================================[ Methods ]===
#---------------------------------------------------[ Set titles if needed ]---
function titles {
  winsize
  echo -e "$blue "
  clear
  echo "$BACKTITLE"
  line=""
  typeset i i=1
  while [ $i -lt $win_x ]; do
    echo -n "_"
    let i=$i+1
  done;
  printf "%${win_x}s" "$WINTITLE"
  echo
  outL="echo -en"
}
#-------------------------[ Format text for output according to screensize ]---
function textformat {
  msg=$1
  line=""
  while [ ${#msg} -gt $win_x ]; do
    txt=${msg:0:$win_x}
    rtxt=${txt%%\\n*}
    if [ "$txt" != "$rtxt" ]; then
      txt="$rtxt"
      len=${#txt}
      msg=${msg:$len+2}
    else
      txt=${txt% *}
      len=${#txt}
      msg=${msg:$len+1}
    fi
    line="${line}$txt\n"
  done
  line="${line}$msg"
}
#------------------[ Display "Please wait..." message (no keypress needed) ]---
# $1 is the message to display
function waitmessage {
  [ $SILENT -eq 3 ] && return 0
  titles
  textformat "$1"
  outL="$outL '${blue}\n$line$NC'"
  eval $outL
}
#-------------------------------------------------------[ Output a message ]---
# $1 is the message
# rc: 0 = OK, 1 = Ctrl-C 255 = ESC
function message {
  [ $SILENT -eq 3 ] && return 0
  waitmessage "$1"
  [ $YESTOALL -eq 0 ] && read res
}
#---------------------------------------------------[ Alert message output ]---
# $1 is the message
# rc: 0 = OK, 1 = Ctrl-C 255 = ESC
function alert {
  [ $SILENT -eq 3 ] && return 0
  titles
  textformat "$1"
  outL="$outL '${red}\n$line$NC'"
  eval $outL
  [ $YESTOALL -eq 0 ] && read res
}
#-------------------------------------------------------[ Output yesno-box ]---
# $1 is the message (aka question here)
# rc: 0 = Yes, 1 = No/Ctrl-C, 255 = ESC
function yesno {
  [ $SILENT -lt 3 -o $YESTOALL -eq 0 ] && waitmessage "$1 (y/n) "
  [ $YESTOALL -eq 1 ] && return 0
  local key=""
  read -n 1 key
  [ "$key" = "y" -o "$key" = "Y" ]
}
#----------------------------------------------------------[ Ask for input ]---
# $1:Text
# $2:DefaultVal
# input is stored in $res (res="-" on abort)
function readval {
  titles
  textformat "$1"
  outL="$outL '${blue}\n$line$NC'"
  eval $outL
  read res
}
#---------------------------------------------------------[ Password input ]---
# $1 is the message (aka password question)
# password is stored in $res
function password {
  titles
  textformat "$1"
  outL="$outL '${blue}\n$line$NC'"
  eval $outL
  read -s res
}
#---------------------------------------------------------[ Display a file ]---
# $1 is the name of the file to display
function textbox() {
  [ $SILENT -eq 3 ] && return 0
  titles
  cat "$1"
  read dummy
}
#-------------------[ Display output of executed program in inline tailbox ]---
# $1: Filename
# $2: Timeout (optional)
# for the plain text + ANSI, this is a dummy only
function tailbox() {
  dummy=1
}
#------------------------------------------------------------[ Make a menu ]---
# pass an array of menu options (first element introductional text, followed by
# triples of entries: Selection, description and help), quoting it as "${array[@]}"
function menu() {
  local parm
  parm=( "$@" )
  local out=`titles`
  local msg=""
  for i in `seq 0 $(( ${#parm[@]} - 1 ))`; do
    [ $i -eq 0 ] && {
      msg="${parm[$i]}"
      continue
    }
    case "$(($i % 3))" in
      1) msg="$msg\n${parm[$i]}:";;
      2) msg="${msg} ${parm[$i]}";;
      3) continue;;
    esac
  done
  readval "$msg\n"
  rc=$?
  [ "$res" = "-" ] && res=""
  [ "$res" = "" ] && return 1
  return $rc
}

steps=4

#------------------------------------------[ Looking for oldes Full Backup ]---
BACKTITLE="Step 1/$steps: Looking for full backups"
waitmessage "Obtaining info about oldest available full backup..."
echo "LIST COPY OF DATABASE;" | $RMANCONN > $TMPFILE
while read line; do
  status=`echo $line | awk '{ print $3 }'`
  [ "$status" != "A" ] && continue
  fkey=`echo $line | awk '{ print $1 }'`
  break
done<$TMPFILE
if [ -z "$fkey" ]; then
  alert "Looks like you don't have any full backup!\nSuggest you make some backups before purging them :)"
  abort
fi

#-------------[ Check for backups older than the latest full backup (copy) ]---
BACKTITLE="Step 2/$steps: Looking for older partial backups"
echo "SET HEAD OFF FEEDBACK OFF LINES 6000 PAGES 0 TRIMSPOOL ON">$TMPFILE
echo "SELECT bs_key,handle,size_bytes_display,TO_CHAR(completion_time,'YYYY-MM-DD HH24:MI') datum FROM v\$backup_piece_details WHERE start_time < (SELECT MIN(min_checkpoint_time) FROM v\$backup_copy_summary);">>$TMPFILE
text="- Checking database for older backups..."
waitmessage "$text"
sqlplus -s / as sysdba<$TMPFILE>out.$$
typeset i idx=0
while read line; do
  key=`echo $line | awk '{print $1}'`
  [ -n "$key" ] && {
    obskey[$idx]=$key
    obsfile[$idx]=`echo $line | awk '{print $2}'`
    obssize[$idx]=`echo $line | awk '{print $3}'`
    datum[${bskey[$key]}]=`echo $line | awk '{ print $4" "$5 }'`
    bskey[$key]=$idx
    let idx=$idx+1
  }
done<out.$$
rm -f out.$$

# Compare collected info with RMAN backup summary
text="${text}\n- Synchronizing collected information with RMAN information...$NC
waitmessage "$text"
echo "LIST BACKUP SUMMARY;" | $RMANCONN > $TMPFILE
typeset i idx=0
while read line; do
  key=`echo $line | awk '{ print $1 }'`
  [[ ${key:0:1} == [0-9] ]] || continue;
  [ $key -gt $fkey ] && break
  levl=`echo $line | awk '{ print $3 }'`
  level[${bskey[$key]}]=$levl
  if [ "$levl" = "F" ]; then
    desc[${bskey[$key]}]="Full backup of datafile or control file"
    type[${bskey[$key]}]="full"
  elif [ "$levl" = "0" ]; then
    desc[${bskey[$key]}]="Incremental base backup (level 0)"
    type[${bskey[$key]}]="full"
  else
    desc[${bskey[$key]}]="Incremental backup (level $levl)"
    type[${bskey[$key]}]="inc"
  fi
done<$TMPFILE

# Presenting results and asking for actions
if [ ${#obskey[*]} -gt 0 ]; then
  echo "First full backup (datafile copy) has key ${fkey}.">$TMPFILE
  echo Following orphaned/older backups were found:">>$TMPFILE
  echo >>$TMPFILE
  idx=0
  echo "Key   Date             Size     Description">>$TMPFILE
  echo "------------------------------------------------">>$TMPFILE
  while [ $idx -lt ${#obskey[*]} ]; do
    printf "%5i %-16s %8s %-30s\n" ${obskey[$idx]} "${datum[$idx]}" ${obssize[$idx]} "${desc[$idx]}">>$TMPFILE
    let idx=$idx+1
  done
  WINTITLE="Please check this list of possible orphans carefully:"
  textbox "$TMPFILE"
  yesno "Do you want to purge ALL these orphans?"
  if [ $? -ne 0 ]; then
    readval "What do you want to purge: (F)ull (incl. level 0), (I)ncremental, or (N)one? "
    lva=`echo $res|tr [:upper:] [:lower:]`
  else
    lva='a'
  fi

  # Running the purge process
  BACKTITLE="Step 3/$steps: Purging older partial backups"
  if [[ $lva == [afi] ]]; then
    case "$lva" in
      a) waitmessage "Purging orphaned backups...";;
      f) waitmessage "Purging old full backups...";;
      i) waitmessage "Purging orphaned incremental backups..."
    esac
    cat /dev/null > $TMPFILE
    idx=0
    while [ $idx -lt ${#obskey[*]} ]; do
      purgeit=0
      case "$lva" in
        f) [ "${level[$idx]}" = 'F' ] && purgeit=1;;
        i) [[ ${level[$idx]} == [0-9] ]] && purgeit=1;;
        a) purgeit=1;;
      esac
      [ $purgeit -eq 1 ] && echo "DELETE NOPROMPT BACKUPSET ${obskey[$idx]};" >> $TMPFILE
      let idx=$idx+1
    done
    runcmd "${RMANCONN} < $TMPFILE | tee -a $LOGFILE"
  else
    waitmessage "Skipping removal of orphaned backups."
  fi
elif [ -n "$key" ]; then
  message "First full backup has key ${fkey}. We found no older backups."
fi

#-------------------------[ Checking whether to purge archive logs as well ]---
BACKTITLE="Step 4/$steps: Looking for older archive logs"
yesno "Shall we also look for forgotten archive logs, i.e. those completed before the first full backup was started?"
[ $? -ne 0 ] && finito
echo "SET HEAD OFF">$TMPFILE
echo "SELECT TO_CHAR(start_time,'YYYY-MM-DD HH24:MI:SS') FROM v\$backup_piece_details WHERE bs_key=$fkey;">>$TMPFILE
waitmessage "Checking database for Timestamp..."
fdat=`sqlplus -s / as sysdba<$TMPFILE`
fdat=`echo $fdat|sed 's/\n//g'`
waitmessage "Removing all archived log files older than '$fdat' (timestamp of the oldest full backup available)"
runcmd "echo \"DELETE NOPROMPT ARCHIVELOG ALL COMPLETED BEFORE \\\"TO_DATE('$fdat','YYYY-MM-DD HH24:MI:SS')\\\";\"|${RMANCONN} | tee -a $LOGFILE"

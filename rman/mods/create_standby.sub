
#=====================================[ Step 1: Introductional information ]===
function step_1() {
  WINTITLE="Step 1/$STEPS: Preparations"
  text="In order to create a standby database, we first need some data. Please make sure that:\n
- you run this script on the host of your PRIMARY database as user oracle\n
- SSH is setup such that the oracle user directly can connect the standby system\n
- the directory structure is the same on both databases\n
- on the host of your standby database, ALL necessary directories (for datafiles, logs, etc) are created and have the correct permissions\n
\n
If all this conditions are met, press OK - otherwise ESC to abort."
  message "$text"
  [ $? -ne 0 ] && abort

# Ensure we are using the correct primary database
  yesno "The current ORACLE_SID is set to '$ORACLE_SID'. Is this the database to create the standby database for?"
  case "$?" in
    255) abort;;
      0) ;;
      1) readval "Please enter the ORACLE_SID of the primary DB to use: "
         export ORACLE_SID=$res
	 ;;
  esac
}

#=======================================================[ Step 2: init.ora ]===
function step_2() {
  WINTITLE="Step 2/$STEPS: Prepare parameter files"
  #-------------------------------------------------[ Get primary init.ora ]---
  spfile="$ORACLE_HOME/dbs/spfile$ORACLE_SID.ora"
  initora="$ORACLE_HOME/dbs/init$ORACLE_SID.ora"
  [ -e "$spfile" ] && {
    yesno "Found '$spfile' - looks like your database is using a Server Parameter File.
           Just to make sure we take the latest changes into consideration, you may
           want to first create a PFILE (init.ora) from this. Before doing so, the
           current $initora - if there is any - will be backed up and saved as
           '${initora}.`date +%Y-%m-%d`.$$'. Shall this be done now?"
    [ $? -eq 0 ] && {
      runcmd "cp $initora ${initora}.`date +%Y-%m-%d`.$$"
      echo "CREATE PFILE FROM SPFILE;">$TMPFILE.sql
      runcmd "sqlplus / as sysdba <$TMPFILE.sql | tee -a $LOGFILE" "$TMPFILE.sql"
      rm -f $TMPFILE.sql
    }
  }
  if [ -e "$initora" ]; then
    yesno "Found '$initora' as possible initialization parameter file of your primary instance. Is this the correct file?"
    [ $? != 0 ] && initora=""
  else
    initora=""
  fi
  [ -z "$initora" ] && {
    message "Could not find the init.ora file of your primary instance. Please make sure yourself that you prepared this file for both, the primary and the standby instance accordingly."
  }
  #-----------------------------------------[ Query standby data from user ]---
  res=""
  while [ -z "$res" ]; do
   readval "Hostname (or IP) of the remote host:"
   remotehost=$res
  done
  readval "Please enter the TNS name of the standby database:"
  tnsname=$res
  # Test Oracle Net for specified standby tns name
  dummy=`tnsping $tnsname`
  [ $? -ne 0 ] && {
    tnsentry="$tnsname =(DESCRIPTION = (ADDRESS = (PROTOCOL = TCP) (Host = $remotehost) (Port = 1521)) (CONNECT_DATA = (SID = $ORACLE_SID) ))"
    yesno "${red}The specified database is not available via Oracle Net!$NC\nThis may
           be because you did not yet setup an entry in your tnsnames.ora for
	   it yet. This entry should look like this:\n
	   \n  $tnsentry\n\nShall we add that entry to your $ORACLE_HOME/network/admin/tnsnames.ora now?"
    [ $? -ne 0 ] && {
      alert "We cannot continue without that entry. Please make sure you setup everything accordingly, and then try again."
      abort
    }
    runcmd "echo -e \"\n$tnsentry\">>$ORACLE_HOME/network/admin/tnsnames.ora"
    dummy=`tnsping $tnsname`
    [ $? -ne 0 ] && {
      alert "We still cannot reach the remote listener. Make sure you provided
             the correct data, and the listener on the remote machine has been
	     started up - then retry. Right now, we abort."
      abort
    }
  }
  readpass "SYS password on the Standby DB:"
  syspwd="$res"
  stbunique="${ORACLE_SID}2"
  readval "The standby database needs a unique name to distinguish it from the master. Please enter the unique name to use ($stbunique):"
  [ -n "$res" ] && stbunique=$res
  mastertns=$ORACLE_SID
  readval "Please enter the TNS name for the primary database, i.e. how it can be reached from the standby system ($mastertns):"
  [ -n "$res" ] && mastertns=$res
  tnsentry="$mastertns =(DESCRIPTION = (ADDRESS = (PROTOCOL = TCP) (Host = `hostname`) (Port = 1521)) (CONNECT_DATA = (SID = $ORACLE_SID) ))"
  yesno "Did you already setup your tnsnames.ora on the standby host, so the
         primary database can be reached from there via Oracle Net?"
  [ $? -ne 0 ] && {
    yesno "This is how the tnsnames.ora entry should look like:\n
           \n  $tnsentry\n\nShall we add it to the standby hosts $ORACLE_HOME/network/admin/tnsnames.ora?"
    [ $? -eq 0 ] && {
      runcmd "ssh $remotehost \"echo -e '$tnsentry' >> $ORACLE_HOME/network/admin/tnsnames.ora\""
      [ $? -ne 0 ] && {
        alert "There was an error updating the tnsnames.ora on the standby host. Please update it manually before proceeding here!"
      }
    }
  }
  lsnrentry="(SID_DESC = (SID_NAME = $ORACLE_SID) (ORACLE_HOME = $ORACLE_HOME))"
  message "You also may need to update your $ORACLE_HOME/network/admin/listener.ora
           on both the primary and standby host, to make the databases known to
           the respective listener. The entry should look like this:\n
           \n$lsnrentry\n
           \nand should be added to the SID_LIST_<listenername> block. This is
           not mandatory but recommended. You may add this entry now or later."
  #----------------------------------[ (temporary) Filenames for init.oras ]---
  stdbyini="init$ORACLE_SID.stdby"
  masterini="init$ORACLE_SID.master"
  text="Now we need filenames to store the updated init.ora files to, so you can verify the settings. Please specify the filename for the"
  readval "$text Init.ora for the new Standby ($stdbyini): "
  [ -n "$res" ] && stdbyini="$res"
  readval "$text Init.ora for the new Master ($masterini): "
  [ -n "$res" ] && masterini="$res"
  #----------------------------------------[ Create the new init.ora files ]---
  cat $initora|sed -e '/LOG_ARCHIVE_DEST_1/d' -e '/STANDBY_FILE_MANAGEMENT/d' \
    -e '/STANDBY_ARCHIVE_DEST/d' -e '/DB_UNIQUE_NAME/d' -e '/FAL_SERVER/d' \
    -e '/FAL_CLIENT/d' -e '/REMOTE_LOGIN_PASSWORD_FILE/d' >$stdbyini
  cat $initora|sed -e '/LOG_ARCHIVE_DEST_1/d' -e '/STANDBY_FILE_MANAGEMENT/d' \
    -e '/STANDBY_ARCHIVE_DEST/d' -e '/FAL_SERVER/d' \
    -e '/FAL_CLIENT/d' -e '/REMOTE_LOGIN_PASSWORD_FILE/d' >$masterini
  cat <<ENDNEW >>$stdbyini

##########################
# Parameters for DataGuard
##########################
LOG_ARCHIVE_DEST_1='SERVICE=$mastertns VALID_FOR=(ALL_LOGFILES,PRIMARY_ROLE)'
STANDBY_FILE_MANAGEMENT=AUTO
STANDBY_ARCHIVE_DEST='LOCATION=USE_DB_RECOVERY_FILE_DEST'
DB_UNIQUE_NAME=$stbunique
FAL_SERVER=$mastertns
FAL_CLIENT=$tnsname
REMOTE_LOGIN_PASSWORD_FILE=EXCLUSIVE
ENDNEW
  cat <<ENDNEW >>$masterini

##########################
# Parameters for DataGuard
##########################
LOG_ARCHIVE_DEST_1='SERVICE=$tnsname VALID_FOR=(ALL_LOGFILES,PRIMARY_ROLE)'
STANDBY_FILE_MANAGEMENT=AUTO
STANDBY_ARCHIVE_DEST='LOCATION=USE_DB_RECOVERY_FILE_DEST'
FAL_SERVER=$tnsname
FAL_CLIENT=$mastertns
REMOTE_LOGIN_PASSWORD_FILE=EXCLUSIVE
ENDNEW

  message "The new init.ora files have been written to the desired destination ($masterini / $stdbyini). Please check if they are correct, and apply changes when necessary. After that, you can proceed (not before)."
}

#=================================================[ Step 3: Forced Logging ]===
# Forced Logging
function step_3 {
  WINTITLE="Step 3/$STEPS: Force Logging"
  text='In order to protect direct writes, which are unlogged and thus would not be propagated to the standby database, you need to have forced logging enabled on the master (primary) database. Shall we do this now?'
  yesno "$text"
  case "$?" in
    255) abort;;
      1) ;;
      0) echo "ALTER DATABASE FORCE LOGGING;">$TMPFILE.sql
         runcmd "sqlplus / as sysdba <$TMPFILE.sql" | tee -a "$LOGFILE"
         rm -f $TMPFILE.sql
	 ;;
  esac
}

#========================================================[ Step 4: Backups ]===
# Make sure we have all backups + controlfile available
function step_4 {
  WINTITLE="Step 4/$STEPS: Backups"
  yesno 'Did you create the control file for the standby database? (If you are not sure, you did not)'
  case "$?" in
    255) abort;;
      0) ;;
      1) waitmessage "Creating controlfile backup..."
         echo "BACKUP CURRENT CONTROLFILE FOR STANDBY;">$TMPFILE
         $RMANCONN <$TMPFILE | tee -a "$LOGFILE"
         [ $? -ne 0 ] && {
           alert "Some error occured creating the standby controlfile - aborting."
           exit 1
         }
	 ;;
  esac
  yesno "We also need a full database backup. You want to create one now?"
  case "$?" in
    255) abort;;
      1) ;;
      0) . ${BINDIR}/mods/backup_daily
         yesno "If the backup was made successfully, we can continue creating the Standby Database. If there have been errors (ignore the
               \"RMAN-20207: UNTIL TIME or RECOVERY WINDOW is before RESETLOGS time\" on a database you just created within that time), this is the time to abort.\nContinue?"
	 [ $? -ne 0 ] && abort
	 ;;
  esac
}

#===========================================[ Step 5: Copy data to Standby ]===
# Copy files to standby host
function step_5 {
  WINTITLE="Step 5/$STEPS: Copy data to target host"
  yesno "Now we need to copy the parameter files and backups to the standby host. This can be done automatically using SSH now - if SSH is setup so the oracle user can directly access its account there from here. Otherwise, you will have to do this manually.\n\nCopy the files automatically now?"
  case "$?" in
    255) abort;;
      1) message "Do not forget to make the backup available on the standby host!";;
      0) srcdir="`echo \"set head off
                select value from v\\$parameter where name='db_recovery_file_dest';\"|sqlplus -s '/ as sysdba'|sed -n '/^\/.*/p'`"
         waitmessage "Copying the parameter file..."
         runcmd "scp $stdbyini $remotehost:${ORACLE_HOME}/dbs/init${ORACLE_SID}.ora"
         [ $? -ne 0 ] && alert "Failed to copy $stdbyini to $remotehost:${ORACLE_HOME}/dbs/init${ORACLE_SID}.ora!\nPlease make sure to put the file to the standby machines ORACLE_HOME/dbs directory as init${ORACLE_SID}.ora"
         readval "Current location of the Backup ($srcdir):"
         [ -n "$res" ] && srcdir="$res"
         readval "Backup location on the remote host ($srcdir):"
	 [ -n "$res" ] && targetdir=$res || targetdir=$srcdir
         waitmessage "Copying files to remote host..."
         runcmd "scp -r $srcdir/* ${remotehost}:$targetdir"
	 ;;
  esac
}

#================================================[ Step 6: Database Status ]===
# Last hints about availability master/client (mount/nomount)
function step_6 {
  WINTITLE="Step 6/$STEPS: Get databases ready"
  message "Now, we need to make sure that:\n
- the standby database is started NOMOUNT using the adjusted init.ora\n
- the backup files are LOCALLY available on the standby machine\n
- you can reach your standby database from the primary host via Oracle Net\n
\nThe script will now automatically check the database state - for the backups
you have to guarantee."
  [ $? -ne 0 ] && abort
  #---------------------------------------[ Test availibility of databases ]---
  msg="Checking whether the databases are prepared..."
  waitmessage "$msg"
  res="`echo \"set head off
      select status from v\\$instance;\"|sqlplus -s '/ as sysdba'`"
  res=`echo $res|awk '{ print $NF }'`
  if [ "$res" == "OPEN" -o "$res" == "MOUNTED" ]; then
    msg="$msg\n* Primary database is $res - ${green}OK${NC}."
    waitmessage "$msg"
  else
    yesno "Primary database must be open or at least mounted! Please start it up before you continue - or the process will fail!\n
          \nShall we bring it up to mount now?"
    [ $? -ne 0 ] && abort
    runcmd "echo \"startup mount\"|sqlplus -s '/ as sysdba'"
    res="`echo \"set head off
        select status from v\\$instance;\"|sqlplus -s '/ as sysdba'`"
    res=`echo $res|awk '{ print $NF }'`
    if [ "$res" == "MOUNTED" ]; then
      msg="$msg\n* Primary database is $res - ${green}OK${NC}."
      waitmessage "$msg"
    else
      alert "Could not startup the primary database!"
      abort
    fi
  fi
  res="`echo \"set head off
      select status from v\\$instance;\"|sqlplus -s sys/$syspwd@$tnsname as sysdba`"
  res=`echo $res|awk '{ print $NF }'`
  case "$res" in
    STARTED)
      msg="$msg\n* Standby database is STARTED without mounting - ${green}OK$NC.";;
    MOUNTED|OPEN)
      alert "Your standby database is already in state \"$res\"!\nEither you
             specified the wrong database, or you already created your standby
             database. In both cases, there is nothing to do here."
      abort
      ;;
    *)
      yesno "Looks like your Standby database is not yet started.\nShall we bring it up to NOMOUNT state now?"
      [ $? -ne 0 ] && abort
      runcmd "echo \"startup nomount\"|sqlplus -s 'sys/$syspwd@$tnsname as sysdba'"
      res="`echo \"set head off
          select status from v\\$instance;\"|sqlplus -s sys/$syspwd@$tnsname as sysdba`"
      res=`echo $res|awk '{ print $NF }'`
      if [ "$res" == "STARTED" ]; then
        msg="$msg\n* Standby database is $res without mounting - ${green}OK$NC."
      else
        alert "Could not prepare the standby database!"
        abort
      fi
      ;;
  esac
  message "$msg"
}

#==================================[ Step 7: Creating the standby database ]===
function step_7 {
  WINTITLE="Step 7/$STEPS: Creating the Standby Database"
  yesno "Now we can create the standby database. Ready?"
  [ $? -ne 0 ] && abort
  waitmessage "Creating the standby database now..."
  RMANCONN="$RMANCONN auxiliary sys/$syspwd@$tnsname"
  runcmd "$RMANCONN < $BINDIR/rman.$CMD" | tee -a "$LOGFILE"
  # Final notes
  yesno "If there have been no errors displayed: Congratulations, your new standby
         database should be ready! However, there is some work left to you (and to your
         decision):
        \n- you need to start managed recovery on the standby database
        \n- you need to make sure that this step is done automatically on server start
        \n- you should make sure that the master is feeding your standby with redo\n
        \nDo you want to start managed recovery on the standby DB now?"
  case "$?" in
    1) ;;
    0) echo "ALTER DATABASE RECOVER MANAGED STANDBY DATABASE DISCONNECT;">$TMPFILE.sql
       runcmd "sqlplus sys/$syspwd@$tnsname as sysdba <$TMPFILE.sql" | tee -a "$LOGFILE"
       rm -f $TMPFILE.sql
       ;;
    *) abort;;
  esac
}

#======================================[ Step 8: Updating primary database ]===
function step_8() {
  WINTITLE="Step 8/$STEPS: Updating the primary Instance"
  if [ -e $spfile ]; then
    SCOPE="both";
  else
    SCOPE="memory";
  fi
  echo "ALTER SYSTEM SET LOG_ARCHIVE_DEST_1='SERVICE=$tnsname VALID_FOR=(ALL_LOGFILES,PRIMARY_ROLE)' SCOPE=$SCOPE;">$TMPFILE.sql
  echo "ALTER SYSTEM SET STANDBY_FILE_MANAGEMENT=AUTO SCOPE=$SCOPE;">>$TMPFILE.sql
  echo "ALTER SYSTEM SET STANDBY_ARCHIVE_DEST='LOCATION=USE_DB_RECOVERY_FILE_DEST' SCOPE=$SCOPE;">>$TMPFILE.sql
  echo "ALTER SYSTEM SET FAL_SERVER=$tnsname SCOPE=$SCOPE;">>$TMPFILE.sql
  echo "ALTER SYSTEM SET FAL_CLIENT=$mastertns SCOPE=$SCOPE;">>$TMPFILE.sql
  echo "ALTER SYSTEM SET REMOTE_LOGIN_PASSWORD_FILE=EXCLUSIVE SCOPE=$SCOPE;">>$TMPFILE.sql
  message "Now we need to update your primary database - amongst others, to tell it
           to feed the new created standby database. The next box will show you the
           commands we are about to execute - and then you are asked whether to
           apply them. If you decide to not apply them automatically, you will
           have to do so manually, and may want to copy the commands from that
           screen - but you will also find the settings at the end of the
           '$masterini'."
  textbox "$TMPFILE.sql"
  yesno "Do you want to apply these changes now?"
  if [ $? -ne 0 ]; then
    message "Do not forget to apply the changes manually, or your standby database will not receive any data!"
  else
    runcmd "sqlplus / as sysdba <$TMPFILE.sql | tee -a $LOGFILE" "$TMPFILE.sql"
  fi
  [ ! -e $spfile ] && {
    yesno "Your database was not started using a Server Parameter File (SPFILE).
           This means, even if you applied the changes as suggested, they will
           be lost after the next restart of your primary database. In order to
           make them permanent, you need to replace your original '$initora' by
           the '$masterini' created here.\n
           \nShall we now backup your '$initora' to '${initora}.$$.`date +%Y-%m-%d`'
           and then replace it with '$masterini'?"
    if [ $? -eq 0 ]; then
      runcmd "cp $initora ${initora}.$$.`date +%Y-%m-%d`"
      typeset -i rc=$?
      runcmd "cp $masterini $initora"
      typeset -i rc2?$?
      let rc=$rc+$rc2
      if [ $rc -eq 0 ]; then
        message "init.ora successfully replaced. On the next restart of your primary
                 database, the settings will remain."
      else
        alert "There have been errors replacing your init.ora!${NC}\nPlease take
               care you replace/update it manually, so your primary database will
               continue feeding the standby after a restart."
      fi
    else
      message "Please take care you replace/update it manually, so your primary
               database will continue feeding the standby after a restart."
    fi
  }
  message "Congratulations - you are done! Good luck with your new Standby Database!"
}

STEPS=8
step_1
step_2
step_3
step_4
step_5
step_6
step_7
step_8

finito
